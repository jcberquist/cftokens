name: release
on:
  push:
    branches: [master]
    paths: [Cargo.toml]

jobs:
  preflight:
    runs-on: ubuntu-latest
    outputs:
      current: ${{ steps.inspect.outputs.current }}
      previous: ${{ steps.inspect.outputs.previous }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Check for version update
        id: inspect
        run: |-
          set -e
          export CURRENT_VERSION=$(sed -n 's/^\s*version\s*=\s*"\([^"]*\)".*$/\1/p' Cargo.toml)
          echo "::set-output name=current::$CURRENT_VERSION"
          git checkout -q HEAD^
          export PREV_VERSION=$(sed -n 's/^\s*version\s*=\s*"\([^"]*\)".*$/\1/p' Cargo.toml)
          echo "::set-output name=previous::$PREV_VERSION"

      - name: Compile Syntect assets
        if: ${{ steps.inspect.outputs.current != steps.inspect.outputs.previous }}
        run: |-
          set -e
          git clone --depth 1 https://github.com/trishume/syntect.git
          rm -r syntect/testdata/*
          cp -r Packages/{HTML,JavaScript,SQL,CSS}/ syntect/testdata/
          mkdir syntect/testdata/CFML
          cp CFML/*.sublime-syntax syntect/testdata/CFML/
          cd syntect
          cargo run --features=metadata --example gendata -- synpack testdata \
            assets/default_newlines.packdump \
            assets/default_nonewlines.packdump \
            assets/default_metadata.packdump
          tar -czf assets/syntect_assets.tar.gz assets/*

      - name: Upload Syntect assets
        if: ${{ steps.inspect.outputs.current != steps.inspect.outputs.previous }}
        uses: actions/upload-artifact@v2
        with:
          name: syntect_assets.tar.gz
          path: syntect/assets/syntect_assets.tar.gz

  build:
    runs-on: ${{ matrix.platform }}
    needs: preflight
    if: ${{ needs.preflight.outputs.current != needs.preflight.outputs.previous }}
    strategy:
      matrix:
        include:
          - platform: ubuntu-latest
            path: target/release/cftokens
            name: cftokens_linux
          - platform: ubuntu-latest
            path: target/x86_64-unknown-linux-musl/release/cftokens
            name: cftokens_linux_musl
            target: --target x86_64-unknown-linux-musl
          - platform: windows-latest
            path: target/release/cftokens.exe
            name: cftokens.exe
          - platform: macos-latest
            path: target/release/cftokens
            name: cftokens_osx
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Clone Syntect repo
        run: git clone --depth 1 https://github.com/trishume/syntect.git

      - name: Fetch Syntect assets
        uses: actions/download-artifact@v2
        with:
          name: syntect_assets.tar.gz

      - name: Install musl tools
        if: ${{ matrix.name == 'cftokens_linux_musl' }}
        run: |-
          sudo apt update
          sudo apt install -y musl-tools
          rustup target install x86_64-unknown-linux-musl

      - name: Build cftokens
        run: |-
          tar -xzf syntect_assets.tar.gz -C syntect
          cargo build --release ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.path }}

  release:
    runs-on: ubuntu-latest
    needs:
      - preflight
      - build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Create release
        run: |-
          set -e
          echo "::group::Create release"
          curl -sSf -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"tag_name": "v${{ needs.preflight.outputs.current }}"}' \
            https://api.github.com/repos/${{ github.repository }}/releases | tee release.json
          echo ::endgroup::

          rm -r artifacts/syntect_assets.tar.gz
          UPLOAD_URL=$(jq -r '.upload_url' < release.json | sed 's/{[^}]*}//')
          for DIR in $(ls artifacts); do
            echo "::group::Upload: $DIR"
            FILENAME=$(ls artifacts/$DIR)
            curl -sSf -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @artifacts/$DIR/$FILENAME \
              $UPLOAD_URL?name=$DIR | jq
            echo ::endgroup::
          done
